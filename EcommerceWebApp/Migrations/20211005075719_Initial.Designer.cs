// <auto-generated />
using System;
using EcommerceWebApp.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EcommerceWebApp.Migrations
{
    [DbContext(typeof(EcommerceWebAppContext))]
    [Migration("20211005075719_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobilePhone")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Attribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeAttributeSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<int>("AttributeSetId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeSetId");

                    b.ToTable("AttributeAttributeSets");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ProductId");

                    b.ToTable("AttributeProducts");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AttributeSets");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Carrier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryText")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Carriers");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("FreeDelivery")
                        .HasColumnType("boolean");

                    b.Property<bool>("Highlight")
                        .HasColumnType("boolean");

                    b.Property<int>("MainCartRuleId")
                        .HasColumnType("integer");

                    b.Property<int>("MinNrProducts")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumAmount")
                        .HasColumnType("integer");

                    b.Property<int>("MultiplyGift")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("Priority")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("PromoLabel")
                        .HasColumnType("text");

                    b.Property<string>("PromoText")
                        .HasColumnType("text");

                    b.Property<decimal>("ReductionAmount")
                        .HasColumnType("numeric");

                    b.Property<int>("SecondaryCartRuleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<int>("TotalAvailable")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAvailableEachUser")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MainCartRuleId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SecondaryCartRuleId");

                    b.HasIndex("UserId");

                    b.ToTable("CartRules");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartRuleId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleId");

                    b.HasIndex("CategoryId");

                    b.ToTable("CartRuleCategories");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartRuleCombinations1Id")
                        .HasColumnType("integer");

                    b.Property<int>("CartRuleCombinations2Id")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleCombinations1Id");

                    b.HasIndex("CartRuleCombinations2Id");

                    b.ToTable("CartRuleCombinations");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartRuleId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartRuleProducts");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartRuleId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("CartRuleProductGroups");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CartRuleId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartRuleId");

                    b.HasIndex("UserId");

                    b.ToTable("CartRuleUser");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<int>("Ift")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Rgt")
                        .HasColumnType("integer");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CategoryProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .HasColumnType("text");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("County")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Tin")
                        .HasColumnType("text");

                    b.Property<string>("Trn")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Default")
                        .HasColumnType("boolean");

                    b.Property<string>("Iso")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("integer");

                    b.Property<int>("BillingCompanyId")
                        .HasColumnType("integer");

                    b.Property<int>("CarrierId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("text");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("ShippingAddressId")
                        .HasColumnType("integer");

                    b.Property<string>("ShippingNo")
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalDiscountTax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalShipping")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalShippingTax")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalTax")
                        .HasColumnType("numeric");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarrierId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.OrderProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Notification")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.OrderStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("OrderStatusId");

                    b.ToTable("OrderStatusHistories");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.PermissionRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionRoles");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("AttributeSetId")
                        .HasColumnType("integer");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Sku")
                        .HasColumnType("text");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<int>("TaxId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeSetId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("TaxId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.ProductGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.RoleUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleUsers");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.SpecificPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Reduction")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("SpecificPrices");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Salutation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.PermissionUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PermissionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionUser");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Address", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeAttributeSet", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Attribute", "Attribute")
                        .WithMany("AttributeAttributeSets")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.AttributeSet", "AttributeSet")
                        .WithMany("AttributeAttributeSets")
                        .HasForeignKey("AttributeSetId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("AttributeSet");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeProduct", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Product", "Product")
                        .WithMany("AttributeProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeValue", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Attribute", "Attribute")
                        .WithMany("AttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRule", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Currency", "MainCartRule")
                        .WithMany("SecondaryCartRules")
                        .HasForeignKey("MainCartRuleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Product", null)
                        .WithMany("CartRules")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.HasOne("EcommerceWebApp.Service.Actions.Currency", "SecondaryCartRule")
                        .WithMany("MainCartRules")
                        .HasForeignKey("SecondaryCartRuleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.User", null)
                        .WithMany("CartRules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction);

                    b.Navigation("MainCartRule");

                    b.Navigation("SecondaryCartRule");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleCategory", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.CartRule", "CartRule")
                        .WithMany()
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Category", "Category")
                        .WithMany("CartRulesCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("CartRule");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleCombination", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.CartRule", "CartRuleCombinations1")
                        .WithMany("CartRuleCombinations2")
                        .HasForeignKey("CartRuleCombinations1Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.CartRule", "CartRuleCombinations2")
                        .WithMany("CartRuleCombinations1")
                        .HasForeignKey("CartRuleCombinations2Id")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("CartRuleCombinations1");

                    b.Navigation("CartRuleCombinations2");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleProduct", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.CartRule", "CartRule")
                        .WithMany()
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Product", "Product")
                        .WithMany("CartRuleProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("CartRule");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleProductGroup", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.CartRule", "CartRule")
                        .WithMany()
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.ProductGroup", "ProductGroup")
                        .WithMany("CartRuleProductGroups")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("CartRule");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRuleUser", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.CartRule", "CartRule")
                        .WithMany("CartRuleUsers")
                        .HasForeignKey("CartRuleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.User", "User")
                        .WithMany("CartRuleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("CartRule");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CategoryProduct", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Category", "Category")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Product", "Product")
                        .WithMany("CategoryProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Company", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.User", "User")
                        .WithMany("Companies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Order", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Carrier", "Carrier")
                        .WithMany("Orders")
                        .HasForeignKey("CarrierId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Currency", "Currency")
                        .WithMany("Orders")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Carrier");

                    b.Navigation("Currency");

                    b.Navigation("OrderStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.OrderProduct", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.OrderStatusHistory", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Order", "Order")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.OrderStatus", "OrderStatus")
                        .WithMany("OrderStatusHistories")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.PermissionRole", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Permission", "Permission")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Role", "Role")
                        .WithMany("PermissionRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Product", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.AttributeSet", "AttributeSet")
                        .WithMany("Products")
                        .HasForeignKey("AttributeSetId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.ProductGroup", "ProductGroup")
                        .WithMany("Products")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.Tax", "Tax")
                        .WithMany("Products")
                        .HasForeignKey("TaxId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("AttributeSet");

                    b.Navigation("ProductGroup");

                    b.Navigation("Tax");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.ProductImage", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.RoleUser", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Role", "Role")
                        .WithMany("RoleUser")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.User", "User")
                        .WithMany("RoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.SpecificPrice", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Actions.Product", "Product")
                        .WithMany("SpecificPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.PermissionUser", b =>
                {
                    b.HasOne("EcommerceWebApp.Service.Permission", "Permission")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("EcommerceWebApp.Service.Actions.User", "User")
                        .WithMany("PermissionUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Attribute", b =>
                {
                    b.Navigation("AttributeAttributeSets");

                    b.Navigation("AttributeValues");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.AttributeSet", b =>
                {
                    b.Navigation("AttributeAttributeSets");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Carrier", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.CartRule", b =>
                {
                    b.Navigation("CartRuleCombinations1");

                    b.Navigation("CartRuleCombinations2");

                    b.Navigation("CartRuleUsers");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Category", b =>
                {
                    b.Navigation("CartRulesCategories");

                    b.Navigation("CategoryProducts");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Currency", b =>
                {
                    b.Navigation("MainCartRules");

                    b.Navigation("Orders");

                    b.Navigation("SecondaryCartRules");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.OrderStatus", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("OrderStatusHistories");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Product", b =>
                {
                    b.Navigation("AttributeProducts");

                    b.Navigation("CartRuleProducts");

                    b.Navigation("CartRules");

                    b.Navigation("CategoryProducts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductImages");

                    b.Navigation("SpecificPrices");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.ProductGroup", b =>
                {
                    b.Navigation("CartRuleProductGroups");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Role", b =>
                {
                    b.Navigation("PermissionRoles");

                    b.Navigation("RoleUser");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.Tax", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Actions.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CartRules");

                    b.Navigation("CartRuleUsers");

                    b.Navigation("Companies");

                    b.Navigation("PermissionUsers");

                    b.Navigation("RoleUsers");
                });

            modelBuilder.Entity("EcommerceWebApp.Service.Permission", b =>
                {
                    b.Navigation("PermissionRoles");

                    b.Navigation("PermissionUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
